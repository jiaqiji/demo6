#line 2 "lex_sql.cpp"
/*
这里的代码会被复制到lex_sql.cpp的最开始位置
定义yy_size_t的原因是因为flex生成的代码，会使用yy_size_t与其他类型的数字
做比较，导致编译报警
*/
#define YY_TYPEDEF_YY_SIZE_T
typedef int yy_size_t;

/* 参考生成的lex_sql.cpp代码，这个宏定义会放在每次运行yylex()最开始的地方 */
#define YY_USER_INIT                                         \
  yycolumn = 0;

/* 参考生成的lex_sql.cpp代码，这个宏定义会放在解析一个token之后，也可以在网上找到大量的参考资料 */
/* 我们在这里设置当前解析的token的位置信息，这样在yacc中就可以使用这些信息了 */
#define YY_USER_ACTION                                       \
do {                                                         \
  yylloc->first_line   = yylloc->last_line = yylineno;       \
  yylloc->first_column = yycolumn;                           \
  yylloc->last_column  = yylloc->first_column + yyleng - 1;  \
  yycolumn += yyleng;                                        \
}                                                            \
while (0);

#line 26 "lex_sql.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

#ifdef yyget_lloc
#define yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yyget_lloc
#endif

#ifdef yyset_lloc
#define yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yyset_lloc
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[343] =
    {   0,
        0,    0,    0,    0,   76,   74,    1,    2,   74,   74,
       74,   54,   55,   66,   64,   56,   65,    6,   67,    3,
        3,    3,    3,    5,   61,   57,   63,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   75,   60,    0,
       72,    0,    0,    0,   73,    0,    0,    0,    3,    0,
        3,    3,   58,   59,   62,   53,   53,   53,   53,   53,
       53,   49,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   51,   53,   53,   53,   53,   53,
       53,   15,   53,   53,   53,   53,   53,   53,   53,   53,

       53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        4,    3,    3,    3,    3,   22,   50,   42,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   32,   53,   53,
       40,   41,   47,   53,   53,   53,   53,   28,   53,   53,
       53,   53,   53,   53,    0,    0,    0,    0,    0,    0,
        0,    0,   73,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    3,   53,   19,   33,   53,   53,   53,
       37,   35,   53,    9,   11,    7,   53,   53,   20,   53,
        8,   53,   53,   53,   24,   44,   36,   46,   53,   53,

       53,   16,   17,   53,   53,   53,   53,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   29,   53,   43,   53,   53,
       53,   34,   52,   14,   53,   53,   53,   48,   53,   53,
       12,   53,   53,   21,    0,    0,    0,    0,    0,   73,
        0,    0,    0,    0,    0,    0,    0,    0,   30,   10,
       26,   53,   38,   23,   53,   53,   18,   13,   27,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   39,   53,   53,    0,    0,    0,
       68,   68,    0,    0,    0,    0,    0,    0,    0,    0,

       45,   31,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
        0,    0,   71,   71,   71,   70,   70,   70,    0,   71,
       70,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    2,    2,    2,    2,    2,    2,    3,    3,    4,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    5,    6,    2,    2,    2,    2,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   21,   23,   24,    2,   25,   26,
       27,   28,    2,    2,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       38,   45,   46,   47,   48,   49,   50,   51,   52,   38,
        2,    2,    2,   53,   38,    2,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   38,   63,   64,   65,   66,
       67,   68,   38,   69,   70,   71,   72,   73,   74,   75,
       76,   38,    2,   77,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1,    1,    1,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    1
    } ;

static const flex_int16_t yy_base[348] =
    {   0,
        0,    0,    0,    0,  307, 3531, 3531, 3531,  275,   72,
       90, 3531, 3531, 3531, 3531, 3531,   63, 3531, 3531,  101,
      112,  128,  139, 3531,   71, 3531,  269,  148,  206,  254,
      144,  141,  143,  198,  199,  202,  201,  203,  251,  252,
      284,  289,  240,  285,  300,  305,  312, 3531, 3531,  288,
     3531,  373,  392,  282, 3531,  410,  428,  147,  439,  383,
      450,  461, 3531, 3531, 3531,    0,  443,  454,  457,  456,
      465,  466,  470,  498,  496,  487,  518,  527,  526,  538,
      555,  566,  568,  588,  633,  571,  529,  597,  617,  610,
      618,  644,  655,  665,  675,  667,  695,  702,  712,  666,

      707,  773,  792,  801,  820,  838,  909,  980, 1051,  234,
      811,  849,  860,  871,  882,  723,  884,  885,  886,  914,
      906,  913,  972,  955,  983,  901,  984,  975, 1029,  916,
     1032,  987, 1044, 1045, 1046, 1073, 1060, 1074, 1081, 1110,
     1082, 1094, 1096, 1111, 1122, 1126, 1127, 1131, 1143, 1166,
     1171, 1176, 1173, 1175,  419, 1237, 1256, 1265, 1284, 1293,
     1312, 1321, 1339, 1410, 1357, 1375, 1428, 1446, 1472, 1490,
     1508, 1526,  745, 1387, 1518, 1314, 1385, 1422, 1506, 1507,
     1423, 1424, 1522, 1425, 1505, 1533, 1538, 1553, 1554, 1555,
     1564, 1568, 1575, 1601, 1584, 1604, 1605, 1621, 1616, 1636,

     1651, 1638, 1643, 1650, 1653, 1665, 1673,  169,  172,  174,
      178,    0,  890, 1743,  489, 1715, 1814, 1885, 1956, 2027,
     2098, 2169, 2240,  748,  265, 1695, 1721, 1718, 1722, 1748,
     1749, 1750, 1752, 1789, 1790, 1806, 1821, 1810, 1817, 1863,
     1866, 1837, 1883, 1892,  121, 2311, 2382,    0,    0,    0,
     2453, 2524, 2595, 2666, 1974, 2737,  196,  251, 1894, 1931,
     1951, 2019, 1952, 1953, 2020, 1983, 1954, 1980, 2021, 2022,
     1499,  231, 1246, 2001,  255,  256, 2069, 2116,  355,  226,
     2124, 2808, 1181,  192, 2048, 2049, 2120,  202,  232,  280,
     3531, 3531, 2879, 2950, 3021, 3092, 3163, 3234, 1291,  168,

     2050, 2097,  368,  621,  768, 3305, 3376, 3447, 1184,  199,
      157, 2144, 2188,  361, 2196, 2215, 2259, 2266, 2285,  236,
     2329, 2338,  519, 2356, 2400, 2418, 2426, 2471,  751, 3531,
     1381,   94,  135,  134,  133,  109,   98,   97, 1382, 3531,
     3531, 3531, 3524, 3526, 3528,  101,  100
    } ;

static const flex_int16_t yy_def[348] =
    {   0,
      342,    1,  343,  343,  342,  342,  342,  342,  342,  344,
      345,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  346,  346,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  342,  342,  344,
      342,  344,  344,  345,  342,  345,  345,  345,  342,  342,
      342,  342,  342,  342,  342,  347,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,  344,  344,  344,  344,  345,  345,  345,  345,  345,
      342,  342,  342,  342,  342,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  344,  344,  344,  344,  344,  344,
      344,  344,  342,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  342,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,  344,  344,  344,
      344,  163,  342,  342,  163,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  342,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  344,  342,  342,  214,  215,  246,
      345,  345,  345,  345,  345,  345,  345,  342,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      344,  344,  342,  342,  342,  342,  345,  345,  345,  345,
      345,  345,  345,  342,   29,   29,   29,  344,  344,  344,
      342,  342,  345,  345,  345,  345,  345,  345,  345,  342,

       29,   29,  344,  344,  344,  345,  345,  345,  345,  345,
      342,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  342,
      345,  342,  344,  344,  344,  345,  345,  345,  345,  342,
      342,    0,  342,  342,  342,  342,  342
    } ;

static const flex_int16_t yy_nxt[3609] =
    {   0,
        6,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   22,
       23,   22,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   37,   38,
       39,   40,   41,   37,   42,   43,   44,   45,   46,   47,
       37,   37,    6,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   37,   42,   43,
       44,   45,   46,   47,   37,   37,    6,   51,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   52,   53,   53,
       53,   53,   53,   53,   53,   53,   55,   63,   64,  340,

      341,   66,   67,  292,  292,   56,   57,   57,   57,   57,
       57,   57,   57,   57,   60,  292,   61,   61,   61,   61,
       62,   61,   61,   62,   61,   60,   51,   61,   61,   61,
       61,   61,   61,   61,   61,   61,  271,  272,   51,   51,
       51,   60,   58,   62,   61,   61,   61,   62,   61,   61,
       62,   61,   60,   55,   61,   61,   62,   61,   61,   61,
       62,   61,   61,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   77,   67,   51,   67,   78,   51,  110,   51,
      332,  245,   81,   51,  245,  311,  245,   82,   79,   68,
      245,   80,   67,   69,   67,   67,   70,   77,   67,  309,

       67,   78,   55,  110,  300,   55,   81,   51,  283,  283,
      283,   82,   79,   68,  303,   80,   67,   69,   67,   67,
       70,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       67,   84,  292,   67,   67,   67,   51,   51,   71,   86,
       55,   51,   83,   85,  304,   87,  288,  290,  288,   67,
       67,  335,   67,   67,   67,   67,   84,   72,   67,   67,
       67,  291,  291,   71,   86,  173,   83,   85,  284,   87,
      276,  276,   95,   67,   67,   96,   67,   67,   67,   88,
      258,   72,   73,   67,   67,   51,   67,   89,   55,   74,
      173,   97,  305,   51,   90,   65,   75,   95,   76,   91,

       96,   49,   67,   67,   88,   67,  342,   73,   67,   67,
      342,   67,   89,   98,   74,   97,   67,   67,   90,  342,
       75,   67,   76,   91,  342,   92,   67,   67,   93,   67,
      342,   94,   67,  100,  342,   67,   67,   67,   98,  342,
       67,   67,   67,   99,   67,  342,   67,  101,  342,   92,
      342,   67,   93,  342,  342,   94,   67,   67,  100,   67,
       67,  292,   67,   67,   67,  342,   51,   99,  342,   67,
      280,  280,  101,   51,  342,   67,  333,  333,   51,  342,
       67,  342,  342,  312,  313,  313,  314,   67,  102,  103,
      103,  103,  103,  103,  103,  103,  103,   51,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  104,  105,  105,
      105,  105,  105,  105,  105,  105,   55,  342,  342,  342,
      342,  342,  342,  342,   51,  106,  107,  107,  107,  107,
      107,  107,  107,  107,   55,  208,  208,  208,  208,  208,
      208,  208,  208,  108,  109,  109,  109,  109,  109,  109,
      109,  109,   60,  342,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   60,  342,  112,  113,  114,  113,  114,
      113,  114,  114,  113,   60,   67,  115,  113,  114,  113,
      114,  113,  114,  114,  113,  116,   67,  117,   67,   67,
      118,  342,  342,  342,   67,  246,  342,   67,   67,  119,

       67,  246,   67,  246,  342,   67,  342,   67,   67,  120,
      116,   67,  117,   67,   67,  118,   67,   67,   67,  124,
      342,   67,   67,   67,  119,  292,  121,   67,   67,   67,
       67,   67,   67,  120,  336,  336,  122,  342,   67,  342,
       67,   67,  342,  123,  124,   67,  342,   67,  342,   67,
       67,  121,  342,   67,  342,   67,  342,  140,   67,   67,
      122,   67,   67,  342,  125,  246,  126,  123,  128,   67,
       67,   67,  127,   67,  129,   67,  342,   67,   67,  342,
       67,  130,  140,   67,   67,  342,   67,   67,  125,   67,
      126,  342,  128,   67,  342,   67,  127,  131,   67,  129,

       67,   67,   67,   67,   67,  130,   67,  342,  132,  139,
      133,  342,   67,   67,  342,  342,  342,   67,  342,   67,
       67,  131,   67,   67,  342,   67,   51,  134,   67,   67,
       67,  342,  132,  139,  133,  342,  315,  316,  317,   67,
      342,   67,   67,   67,  342,   67,   67,  141,   67,   67,
       67,  134,  342,  342,   67,  342,  143,  144,  142,  342,
      342,   67,  342,   67,  135,   67,  136,   67,   67,   67,
      342,  141,   67,  342,   67,   67,   67,  342,  137,  138,
      143,  144,  142,  342,   67,   67,  145,   67,  342,  135,
       67,  136,   67,   67,  342,   67,  342,   67,   67,   67,

      342,   67,  137,  138,  146,  153,   67,   67,   67,  149,
      342,  145,   67,  342,  147,  342,   67,   67,   67,   67,
      342,  148,   67,   67,   67,  342,   67,   67,  146,  153,
       67,  151,   67,  149,   67,  342,  150,  342,  147,  154,
       67,   67,   67,  152,   67,  148,   67,  342,  342,  342,
       67,   55,   67,   67,   55,   67,  151,  292,   67,   67,
      150,  342,  342,   67,  154,  342,  338,  280,  152,   67,
       67,  342,  342,   51,   67,  342,  224,   67,   51,  257,
       67,  342,   67,  318,  319,  319,  320,   67,  155,  156,
      156,  156,  156,  156,  156,  156,  156,   51,   67,  342,

      342,  224,  342,  342,  257,  342,   51,  157,  158,  158,
      158,  158,  158,  158,  158,  158,  159,  160,  160,  160,
      160,  160,  160,  160,  160,   51,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  161,  162,  162,  162,  162,
      162,  162,  162,  162,  163,  342,  342,  342,  342,  342,
      164,  342,  164,  165,  166,  166,  166,  166,  166,  166,
      166,  166,   60,  342,   59,   59,   59,   59,  174,   59,
       59,  174,   59,   60,  342,   59,   59,  174,   59,   59,
       59,  174,   59,   59,   60,  342,  174,   59,   59,   59,
      174,   59,   59,  174,   59,   60,  342,  174,   59,   59,

       59,  174,   59,   59,  174,   59,  215,  215,  215,  215,
      215,  215,  215,  215,  164,  163,   67,   67,   67,  342,
      342,  164,  175,  164,  167,  168,  168,  168,  168,  168,
      168,  168,  168,  183,  342,   67,   67,   67,   67,  342,
      342,   67,   67,   67,  176,   67,   67,  175,   67,  342,
      177,  342,   67,  178,  342,  187,  342,   67,  183,   67,
       67,   67,  342,   67,   67,   67,  342,   67,  342,  176,
       67,   67,  342,   67,  177,  342,   67,  178,  342,  187,
      342,   67,  342,  180,  342,  164,  163,   67,   67,   67,
      342,   67,  164,  342,  164,  169,  170,  170,  170,  170,

      170,  170,  170,  170,   67,  342,   67,   67,  180,  342,
      342,  181,   67,  179,  184,  182,   67,  342,  185,   67,
      342,  342,  342,   67,  342,  342,   67,  189,  342,   67,
       67,  342,   67,  342,   67,   67,  181,  179,   67,  184,
      182,   67,  185,  342,   67,  342,  342,   67,  342,  342,
       67,  189,  342,  342,  342,  342,  164,  163,   67,   67,
      188,   67,   67,  164,   67,  164,  171,  172,  172,  172,
      172,  172,  172,  172,  172,  186,   67,   67,  192,  342,
       67,  342,  342,   67,  342,  188,   67,  342,  191,   67,
      342,  190,  194,  342,  342,   67,   67,   67,  342,  186,

      342,   67,   67,  192,   67,   67,   67,   67,  342,  193,
      342,   67,  191,  196,   67,  190,  195,  194,  342,   67,
       67,   67,  342,  342,   67,   67,   67,  164,   67,  342,
       67,   67,   67,   67,  193,   67,  342,  342,  196,   67,
      195,  197,   67,   67,  342,   67,  342,   67,   67,   67,
      198,   67,  342,   67,  199,  342,   67,   67,   67,  201,
      342,   67,   67,   67,  342,  200,  197,   67,   67,   67,
      342,   67,  342,   67,  198,   67,  342,   67,   67,  199,
      342,  342,   67,   67,  201,   67,   67,   55,   67,  200,
      330,  342,  202,  342,   67,  342,  203,   67,   67,  342,

       67,   67,   67,   67,  205,   67,   67,   67,   67,  342,
      204,  342,  299,  342,  342,  331,  202,   67,   67,  207,
      206,  203,   67,   67,   67,  342,   67,   67,   67,  205,
       67,  342,   67,   67,  204,  342,  342,  299,  342,  342,
      331,   67,   51,  207,  206,  342,   67,  342,   67,  342,
       67,   67,  208,  209,  209,  209,  209,  209,  209,  209,
      209,   51,  276,  276,  276,  276,  276,  276,  276,  276,
       51,  208,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  210,  210,  210,  210,  210,  210,  210,  210,   51,
      342,  309,  342,  342,  342,  342,  342,   55,   51,  208,

      209,  209,  209,  209,  209,  209,  209,  209,  209,  210,
      210,  210,  210,  210,  210,  210,  210,   51,  342,  342,
      342,  342,  310,  342,  342,  342,   51,  209,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  211,  211,  211,
      211,  211,  211,  211,  211,  212,   67,  310,  342,  342,
      342,  212,  342,  212,  213,  214,  215,  215,  215,  215,
      215,  215,  215,   55,  342,   67,  342,  342,  342,  342,
      342,   67,  219,  220,  220,  220,  220,  220,  220,  220,
      220,   55,  342,  342,  342,  342,  342,  330,  330,   67,
      220,  221,  221,  221,  221,  221,  221,  221,  221,  225,

       60,  342,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  342,  339,  339,  342,  212,  163,   67,  342,  342,
      342,  342,  164,  342,  164,  216,  217,  218,  218,  218,
      218,  218,  218,  218,   55,  342,   67,  339,  339,  342,
      342,  342,   67,  220,  221,  221,  221,  221,  221,  221,
      221,  221,   55,  342,   67,   67,   67,   67,  227,  342,
       67,  221,  222,  222,  222,  222,  222,  222,  222,  222,
      342,  342,  342,   67,   67,   67,   67,  342,   55,   67,
       67,   67,   67,  227,  342,  342,  164,  220,  221,  221,
      221,  221,  221,  221,  221,  221,   55,   67,   67,   67,

       67,  342,  342,  342,   51,  221,  222,  222,  222,  222,
      222,  222,  222,  222,   55,  288,  289,  288,  290,  288,
      290,  288,  290,  221,  222,  222,  222,  222,  222,  222,
      222,  222,   55,  342,  342,  342,  342,   67,   67,   67,
      342,  222,  223,  223,  223,  223,  223,  223,  223,  223,
       67,  342,  228,  229,   67,  342,   67,   67,   67,  226,
      342,  342,   67,   67,   67,   67,  231,  342,  230,   67,
       67,  342,  342,   67,  342,   67,  228,  229,  342,   67,
       67,   67,   67,  226,   67,   67,   67,   67,  342,   67,
       67,  231,  230,   67,  342,   67,   67,   67,  233,  232,

       67,  342,  342,  342,   67,   67,   67,   67,   67,  342,
       67,   67,   67,   67,  235,   67,   67,  342,  234,   67,
      342,   67,  233,  232,  342,   67,   67,  342,   67,   67,
       67,  342,   67,   67,  342,   67,   67,   67,  235,   67,
      342,   67,  234,   67,  342,  236,  342,  342,   67,  237,
       67,  342,   67,   67,  342,   67,   67,  342,   67,   67,
      238,   67,   67,  342,  342,  239,  342,   67,   67,  236,
       67,  342,   67,   67,  237,   67,   67,  342,   67,   67,
       67,  240,  241,   67,  238,   67,  342,   67,  342,   67,
      239,   67,  342,   67,   67,   67,   67,  243,  342,  242,

       67,   67,   67,  342,   67,  244,  240,  241,   67,  342,
       67,   67,  342,   67,  342,  342,   67,  342,   67,  342,
      342,   55,  243,  242,   67,   67,   67,   67,   67,  342,
      244,  218,  218,  218,  218,  218,  218,  218,  218,  342,
       67,  342,  342,  342,  342,  342,   67,  342,   67,  246,
       67,  342,   67,   67,  260,  246,  342,  246,  247,  248,
      249,  215,  215,  215,  215,  215,  215,  259,  342,   67,
       67,  342,   67,   67,  342,   67,  342,  342,   67,  260,
      261,   67,   67,  342,   67,  262,  342,  342,  342,  342,
      342,  259,  342,   67,  342,  342,   67,   67,  342,   67,

       67,   67,  342,   67,  342,  261,   67,   67,  342,   67,
      262,  342,  342,  342,  342,  342,  342,  342,  342,  246,
      250,   67,  263,   67,   67,   67,  251,   67,  251,  252,
      253,  254,  218,  218,  218,  218,  218,  218,   67,  342,
       67,   67,   67,  342,  342,  266,   67,  263,  342,   67,
      265,  342,  264,   67,  342,  342,  342,   67,  342,  342,
      342,   67,  342,   67,   67,   67,  342,   67,   67,  269,
      266,  342,   67,  342,   67,  265,  264,  342,   67,  342,
      342,   67,  342,  342,  342,   67,  342,  342,   67,  342,
      251,  250,   67,  342,  269,   67,   67,  251,   67,  251,

      216,  217,  218,  218,  218,  218,  218,  218,  218,  267,
      342,  268,   67,  342,   67,   67,  342,   67,  342,  342,
       67,  342,  342,   67,   67,  342,   67,  342,  270,  342,
      342,  342,  342,  267,   67,  268,  342,  342,   67,  342,
       67,   67,  342,   67,  342,   67,  342,  342,  342,   67,
      342,   67,  270,  342,  342,  342,  342,  342,   67,  342,
      342,  251,  163,   67,  342,  342,  342,   67,  164,   67,
      164,  255,  255,  255,  255,  255,  255,  255,  255,  255,
       55,  342,   67,   67,   67,   67,   67,  342,   67,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  342,  342,

      342,  342,   67,   67,   67,   67,   67,  291,   67,   67,
       67,   67,   67,  287,  342,   67,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  342,   67,   67,   67,   67,
      342,   67,  164,  163,   67,  342,  342,   67,  287,  256,
       67,  164,  255,  255,  255,  255,  255,  255,  255,  255,
      255,   67,   67,   67,   67,   67,  342,  342,   67,  286,
      285,  342,  342,  342,  342,  342,  342,  342,  342,  342,
       67,   67,   67,   67,  342,   55,   67,   67,   67,   67,
       67,  301,   67,  286,  285,  280,  280,  280,  280,  280,
      280,  280,  280,  342,   67,   67,   67,   67,  342,   67,

       67,   67,  342,  164,  163,   67,  301,   67,  342,  342,
      256,  342,  164,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  292,   67,   67,   67,  342,  342,  342,   67,
       55,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      293,  294,  293,  295,  293,  295,  293,  295,   67,   51,
      342,  342,   67,  342,   67,  342,  342,  342,  302,  342,
      333,  333,  333,  333,  333,  333,  333,  333,  342,  342,
      342,   67,   67,  342,  164,  163,  342,   67,  342,  342,
      342,  256,  302,  164,  255,  255,  255,  255,  255,  255,
      255,  255,  255,   51,  342,   67,  342,  342,  342,  342,

      342,   51,  342,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  334,  334,  334,  334,  334,  334,  334,  334,
       51,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  342,
      342,  342,  342,  342,  342,  164,  163,  342,  342,  342,
      342,  342,  256,  342,  164,  255,  255,  255,  255,  255,
      255,  255,  255,  255,   51,  342,  342,  342,  342,  342,
      342,   51,  342,  342,  334,  334,  334,  334,  334,  334,
      334,  334,  335,  335,  335,  335,  335,  335,  335,  335,
       51,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      335,  335,  335,  335,  335,  335,  335,  335,  335,  342,
      342,  342,  342,  342,  342,  342,  164,  246,  342,  342,
      342,  342,  342,  246,  342,  246,  273,  274,  274,  275,
      276,  276,  276,  276,  276,   55,  342,  342,  342,  342,
      342,  342,  342,  342,  292,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,   55,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  337,  337,  337,  337,  337,  337,  337,  337,
      342,  342,  342,  342,  342,  342,  342,  246,  246,  342,
      342,  342,  342,  342,  246,  342,  246,  213,  248,  249,

      249,  249,  249,  249,  249,  249,  292,  342,  342,  342,
      342,  342,  342,  342,  342,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  292,  342,  342,  342,  342,  342,
      342,  342,   55,  337,  337,  337,  337,  337,  337,  337,
      337,  280,  338,  338,  338,  338,  338,  338,  338,  338,
      342,  342,  342,  342,  342,  342,  342,  342,  246,  250,
      342,  342,  342,  342,  342,  251,  342,  251,  277,  278,
      278,  279,  280,  280,  280,  280,  280,  292,  342,  342,
      342,  342,  342,  342,  342,  342,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  251,
      250,  342,  342,  342,  342,  342,  251,  342,  251,  216,
      253,  254,  254,  254,  254,  254,  254,  254,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      251,  250,  342,  342,  342,  342,  342,  251,  342,  251,
      252,  253,  254,  218,  218,  218,  218,  218,  218,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  251,  250,  342,  342,  342,  342,  342,  251,  342,
      251,  216,  217,  218,  218,  218,  218,  218,  218,  218,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  251,  163,  342,  342,  342,  342,  342,  164,
      342,  164,  281,  282,  218,  218,  218,  218,  218,  218,
      218,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  164,  250,  342,  342,  342,  342,  342,
      251,  342,  251,  296,  297,  298,  218,  218,  218,  218,
      218,  218,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  251,  250,  342,  342,  342,  342,
      342,  306,  342,  251,  216,  217,  218,  218,  218,  218,

      218,  218,  218,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  251,  250,  342,  342,  342,
      342,  342,  307,  342,  251,  216,  217,  218,  218,  218,
      218,  218,  218,  218,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  251,  250,  342,  342,
      342,  342,  342,  308,  342,  251,  216,  217,  218,  218,
      218,  218,  218,  218,  218,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  251,  250,  342,

      342,  342,  342,  342,  306,  342,  251,  216,  253,  254,
      254,  254,  254,  254,  254,  254,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  251,  250,
      342,  342,  342,  342,  342,  308,  342,  251,  252,  253,
      254,  218,  218,  218,  218,  218,  218,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  251,
      250,  342,  342,  342,  342,  342,  306,  342,  251,  216,
      217,  218,  218,  218,  218,  218,  218,  218,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      251,  250,  342,  342,  342,  342,  342,  251,  342,  251,
      321,  322,  322,  323,  280,  280,  280,  280,  280,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  251,  250,  342,  342,  342,  342,  342,  251,  342,
      251,  324,  325,  326,  279,  280,  280,  280,  280,  280,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  251,  250,  342,  342,  342,  342,  342,  251,
      342,  251,  327,  328,  328,  329,  280,  280,  280,  280,
      280,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  251,   48,   48,   50,   50,   54,   54,
        5,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342
    } ;

static const flex_int16_t yy_chk[3609] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   10,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   11,   25,   25,  332,

      332,  347,  346,  338,  337,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   20,  336,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   21,  245,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  245,  245,  335,  334,
      333,   22,   11,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   23,   58,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   31,   32,  208,   33,   31,  209,   58,  210,
      311,  208,   33,  211,  209,  300,  210,   33,   31,   28,
      211,   32,   32,   28,   33,   31,   28,   31,   32,  310,

       33,   31,  257,   58,  284,  310,   33,  288,  257,  257,
      257,   33,   31,   28,  288,   32,   32,   28,   33,   31,
       28,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       34,   35,  280,   37,   36,   38,  272,  289,   29,   38,
      110,  320,   34,   36,  289,   38,  272,  272,  272,   34,
       35,  320,   37,   36,   38,   34,   35,   29,   37,   36,
       38,  275,  276,   29,   38,  110,   34,   36,  258,   38,
      275,  275,   43,   34,   35,   43,   37,   36,   38,   39,
      225,   29,   30,   39,   40,  290,   30,   39,   54,   30,
      110,   43,  290,   50,   40,   27,   30,   43,   30,   40,

       43,    9,   39,   40,   39,   30,    5,   30,   39,   40,
        0,   30,   39,   44,   30,   43,   41,   44,   40,    0,
       30,   42,   30,   40,    0,   41,   39,   40,   41,   30,
        0,   42,   45,   46,    0,   41,   44,   46,   44,    0,
       42,   41,   44,   45,   47,    0,   42,   47,    0,   41,
        0,   45,   41,    0,    0,   42,   46,   45,   46,   41,
       44,  279,   46,   47,   42,    0,  314,   45,    0,   47,
      279,  279,   47,  303,    0,   45,  314,  314,   52,    0,
       46,    0,    0,  303,  303,  303,  303,   47,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   53,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   56,    0,    0,    0,
        0,    0,    0,    0,  155,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   57,  155,  155,  155,  155,  155,
      155,  155,  155,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   59,    0,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   61,    0,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   62,   67,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   68,   68,   69,   70,   69,
       70,    0,    0,    0,   67,  215,    0,   71,   72,   71,

       67,  215,   73,  215,    0,   68,    0,   70,   69,   73,
       68,   68,   69,   70,   69,   70,   71,   72,   67,   76,
        0,   73,   71,   72,   71,  323,   74,   73,   75,   68,
       74,   70,   69,   73,  323,  323,   75,    0,   76,    0,
       71,   72,    0,   75,   76,   73,    0,   75,    0,   74,
       77,   74,    0,   75,    0,   74,    0,   87,   79,   78,
       75,   87,   76,    0,   77,  215,   78,   75,   79,   77,
       80,   75,   78,   74,   80,   77,    0,   79,   78,    0,
       87,   80,   87,   79,   78,    0,   87,   81,   77,   80,
       78,    0,   79,   77,    0,   80,   78,   81,   82,   80,

       83,   79,   78,   86,   87,   80,   81,    0,   82,   86,
       83,    0,   81,   80,    0,    0,    0,   82,    0,   83,
       84,   81,   86,   82,    0,   83,  304,   84,   86,   88,
       81,    0,   82,   86,   83,    0,  304,  304,  304,   84,
        0,   82,   90,   83,    0,   84,   86,   88,   88,   89,
       91,   84,    0,    0,   88,    0,   90,   91,   89,    0,
        0,   90,    0,   84,   85,   85,   85,   90,   89,   91,
        0,   88,   88,    0,   89,   91,   92,    0,   85,   85,
       90,   91,   89,    0,   85,   90,   93,   93,    0,   85,
       85,   85,   89,   91,    0,   92,    0,   94,  100,   96,

        0,   92,   85,   85,   94,  100,   93,   95,   85,   96,
        0,   93,   93,    0,   95,    0,   94,  100,   96,   92,
        0,   95,   94,  100,   96,    0,   95,   97,   94,  100,
       93,   98,   95,   96,   98,    0,   97,    0,   95,  101,
       94,  100,   96,   99,   99,   95,   97,    0,    0,    0,
       95,  173,   97,   98,  224,  116,   98,  329,  101,   98,
       97,    0,    0,   99,  101,    0,  329,  329,   99,   99,
       97,    0,    0,  305,  116,    0,  173,   98,  102,  224,
      116,    0,  101,  305,  305,  305,  305,   99,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  103,  116,    0,

        0,  173,    0,    0,  224,    0,  104,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  105,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  106,    0,    0,    0,    0,    0,
      106,    0,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  112,    0,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  113,    0,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  114,    0,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  115,    0,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  213,  213,  213,  213,
      213,  213,  213,  213,  106,  107,  117,  118,  119,    0,
        0,  107,  119,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  126,    0,  117,  118,  119,  121,    0,
        0,  117,  118,  119,  120,  122,  120,  119,  130,    0,
      121,    0,  126,  122,    0,  130,    0,  121,  126,  117,
      118,  119,    0,  121,  122,  120,    0,  130,    0,  120,
      122,  120,    0,  130,  121,    0,  126,  122,    0,  130,
        0,  121,    0,  124,    0,  107,  108,  124,  122,  120,
        0,  130,  108,    0,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  123,    0,  124,  128,  124,    0,
        0,  125,  124,  123,  127,  125,  127,    0,  128,  132,
        0,    0,    0,  123,    0,    0,  128,  132,    0,  123,
      124,    0,  128,    0,  125,  127,  125,  123,  132,  127,
      125,  127,  128,    0,  132,    0,    0,  123,    0,    0,
      128,  132,    0,    0,    0,    0,  108,  109,  125,  127,
      131,  129,  132,  109,  131,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  129,  133,  134,  135,    0,
      129,    0,    0,  131,    0,  131,  129,    0,  134,  131,
        0,  133,  137,    0,    0,  133,  134,  135,    0,  129,

        0,  133,  134,  135,  129,  136,  138,  131,    0,  136,
        0,  137,  134,  139,  141,  133,  138,  137,    0,  133,
      134,  135,    0,    0,  136,  138,  142,  109,  143,    0,
      136,  138,  139,  141,  136,  137,    0,    0,  139,  141,
      138,  140,  140,  144,    0,  142,    0,  143,  136,  138,
      144,  142,    0,  143,  145,    0,  139,  141,  146,  147,
        0,  140,  144,  148,    0,  146,  140,  140,  144,  142,
        0,  143,    0,  145,  144,  149,    0,  146,  147,  145,
        0,    0,  148,  146,  147,  140,  144,  283,  148,  146,
      309,    0,  149,    0,  149,    0,  150,  145,  150,    0,

      149,  146,  147,  151,  152,  153,  148,  154,  152,    0,
      151,    0,  283,    0,    0,  309,  149,  150,  149,  154,
      153,  150,  151,  150,  153,    0,  154,  152,  151,  152,
      153,    0,  154,  152,  151,    0,    0,  283,    0,    0,
      309,  150,  156,  154,  153,    0,  151,    0,  153,    0,
      154,  152,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  157,  273,  273,  273,  273,  273,  273,  273,  273,
      158,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  159,
        0,  299,    0,    0,    0,    0,    0,  299,  160,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  161,    0,    0,
        0,    0,  299,    0,    0,    0,  162,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  163,  176,  299,    0,    0,
        0,  163,    0,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  165,    0,  176,    0,    0,    0,    0,
        0,  176,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  166,    0,    0,    0,    0,    0,  331,  339,  176,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  174,

      174,    0,  174,  174,  174,  174,  174,  174,  174,  174,
      174,    0,  331,  339,    0,  163,  164,  177,    0,    0,
        0,    0,  164,    0,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  167,    0,  177,  331,  339,    0,
        0,    0,  177,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  168,    0,  178,  181,  182,  184,  178,    0,
      177,  168,  168,  168,  168,  168,  168,  168,  168,  168,
        0,    0,    0,  178,  181,  182,  184,    0,  169,  178,
      181,  182,  184,  178,    0,    0,  164,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  170,  178,  181,  182,

      184,    0,    0,    0,  271,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  171,  271,  271,  271,  271,  271,
      271,  271,  271,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  172,    0,    0,    0,    0,  185,  179,  180,
        0,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      175,    0,  179,  180,  183,    0,  185,  179,  180,  175,
        0,    0,  185,  179,  180,  186,  187,    0,  183,  175,
      187,    0,    0,  183,    0,  175,  179,  180,    0,  183,
      185,  179,  180,  175,  186,  188,  189,  190,    0,  187,
      186,  187,  183,  175,    0,  187,  191,  183,  190,  188,

      192,    0,    0,    0,  188,  189,  190,  193,  186,    0,
      188,  189,  190,  187,  193,  191,  195,    0,  192,  192,
        0,  191,  190,  188,    0,  192,  193,    0,  188,  189,
      190,    0,  193,  194,    0,  195,  196,  197,  193,  191,
        0,  195,  192,  192,    0,  194,    0,    0,  199,  198,
      193,    0,  194,  198,    0,  196,  197,    0,  194,  195,
      199,  196,  197,    0,    0,  200,    0,  199,  200,  194,
      202,    0,  198,  199,  198,  203,  194,    0,  198,  196,
      197,  201,  204,  201,  199,  205,    0,  200,    0,  202,
      200,  199,    0,  200,  203,  202,  198,  206,    0,  205,

      203,  204,  201,    0,  205,  207,  201,  204,  201,    0,
      205,  200,    0,  202,    0,    0,  206,    0,  203,    0,
        0,  216,  206,  205,  207,  204,  201,  226,  205,    0,
      207,  216,  216,  216,  216,  216,  216,  216,  216,    0,
      206,    0,    0,    0,    0,    0,  226,    0,  207,  214,
      228,    0,  226,  227,  229,  214,    0,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  227,    0,  228,
      226,    0,  227,  229,    0,  228,    0,    0,  227,  229,
      230,  231,  232,    0,  233,  231,    0,    0,    0,    0,
        0,  227,    0,  228,    0,    0,  227,  229,    0,  230,

      231,  232,    0,  233,    0,  230,  231,  232,    0,  233,
      231,    0,    0,    0,    0,    0,    0,    0,    0,  214,
      217,  234,  235,  230,  231,  232,  217,  233,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  236,    0,
      234,  235,  238,    0,    0,  239,  234,  235,    0,  239,
      237,    0,  236,  237,    0,    0,    0,  236,    0,    0,
        0,  238,    0,  236,  234,  235,    0,  238,  239,  242,
      239,    0,  237,    0,  239,  237,  236,    0,  237,    0,
        0,  236,    0,    0,    0,  238,    0,    0,  242,    0,
      217,  218,  239,    0,  242,  240,  237,  218,  241,  218,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  240,
        0,  241,  242,    0,  240,  243,    0,  241,    0,    0,
      240,    0,    0,  241,  244,    0,  259,    0,  243,    0,
        0,    0,    0,  240,  243,  241,    0,    0,  240,    0,
      243,  241,    0,  244,    0,  259,    0,    0,    0,  244,
        0,  259,  243,    0,    0,    0,    0,    0,  243,    0,
        0,  218,  219,  260,    0,    0,    0,  244,  219,  259,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      255,    0,  260,  261,  263,  264,  267,    0,  260,  255,
      255,  255,  255,  255,  255,  255,  255,  255,    0,    0,

        0,    0,  261,  263,  264,  267,  260,  274,  261,  263,
      264,  267,  268,  266,    0,  266,  274,  274,  274,  274,
      274,  274,  274,  274,  274,    0,  261,  263,  264,  267,
        0,  268,  219,  220,  266,    0,    0,  268,  266,  220,
      266,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  262,  265,  269,  270,  268,    0,    0,  266,  265,
      262,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      262,  265,  269,  270,    0,  277,  262,  265,  269,  270,
      285,  286,  301,  265,  262,  277,  277,  277,  277,  277,
      277,  277,  277,    0,  262,  265,  269,  270,    0,  285,

      286,  301,    0,  220,  221,  285,  286,  301,    0,    0,
      221,    0,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  278,  285,  286,  301,    0,    0,    0,  302,
      281,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      281,  281,  281,  281,  281,  281,  281,  281,  302,  312,
        0,    0,  287,    0,  302,    0,    0,    0,  287,    0,
      312,  312,  312,  312,  312,  312,  312,  312,    0,    0,
        0,  287,  302,    0,  221,  222,    0,  287,    0,    0,
        0,  222,  287,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  313,    0,  287,    0,    0,    0,    0,

        0,  315,    0,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  315,  315,  315,  315,  315,  315,  315,  315,
      316,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      316,  316,  316,  316,  316,  316,  316,  316,  316,    0,
        0,    0,    0,    0,    0,  222,  223,    0,    0,    0,
        0,    0,  223,    0,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  317,    0,    0,    0,    0,    0,
        0,  318,    0,    0,  317,  317,  317,  317,  317,  317,
      317,  317,  318,  318,  318,  318,  318,  318,  318,  318,
      319,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      319,  319,  319,  319,  319,  319,  319,  319,  319,    0,
        0,    0,    0,    0,    0,    0,  223,  246,    0,    0,
        0,    0,    0,  246,    0,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  321,    0,    0,    0,    0,
        0,    0,    0,    0,  322,  321,  321,  321,  321,  321,
      321,  321,  321,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  324,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  324,  324,  324,  324,  324,  324,  324,  324,
        0,    0,    0,    0,    0,    0,    0,  246,  247,    0,
        0,    0,    0,    0,  247,    0,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  325,    0,    0,    0,
        0,    0,    0,    0,    0,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  326,    0,    0,    0,    0,    0,
        0,    0,  327,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  327,  327,  327,  327,  327,  327,  327,  327,
        0,    0,    0,    0,    0,    0,    0,    0,  247,  251,
        0,    0,    0,    0,    0,  251,    0,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  328,    0,    0,
        0,    0,    0,    0,    0,    0,  328,  328,  328,  328,
      328,  328,  328,  328,  328,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  251,
      252,    0,    0,    0,    0,    0,  252,    0,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      252,  253,    0,    0,    0,    0,    0,  253,    0,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  253,  254,    0,    0,    0,    0,    0,  254,    0,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  254,  256,    0,    0,    0,    0,    0,  256,
        0,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  256,  282,    0,    0,    0,    0,    0,
      282,    0,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  282,  293,    0,    0,    0,    0,
        0,  293,    0,  293,  293,  293,  293,  293,  293,  293,

      293,  293,  293,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  293,  294,    0,    0,    0,
        0,    0,  294,    0,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  294,  295,    0,    0,
        0,    0,    0,  295,    0,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  295,  296,    0,

        0,    0,    0,    0,  296,    0,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  296,  297,
        0,    0,    0,    0,    0,  297,    0,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  297,
      298,    0,    0,    0,    0,    0,  298,    0,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      298,  306,    0,    0,    0,    0,    0,  306,    0,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  306,  307,    0,    0,    0,    0,    0,  307,    0,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  307,  308,    0,    0,    0,    0,    0,  308,
        0,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  308,  343,  343,  344,  344,  345,  345,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lex_sql.l"

#line 28 "lex_sql.l"
#include<string.h>
#include<stdio.h>

/**
 * flex 代码包含三个部分，使用 %% 分隔
 * 第一个部分的代码是C代码，flex会原样复制到目标文件中
 * 第二个部分是规则部分，使用正则表达式定义一系列规则
 * 第三个部分还是C代码，flex 会复制此段代码
 */

#include "sql/parser/parse_defs.h"
#include "common/log/log.h"
#include "yacc_sql.hpp"

#ifndef register
#define register 
#endif // register

extern int atoi();
extern double atof();

#define RETURN_TOKEN(token) LOG_DEBUG("%s", #token);return token
#line 1402 "lex_sql.cpp"
/* Prevent the need for linking with -lfl */
#define YY_NO_INPUT 1
/* 不区分大小写 */

/* 规则匹配的优先级：*/
/* 1. 匹配的规则长的优先 */
/* 2. 写在最前面的优先 */
/* yylval 就可以认为是 yacc 中 %union 定义的结构体(union 结构) */
#line 1411 "lex_sql.cpp"

#define INITIAL 0
#define STR 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 80 "lex_sql.l"


#line 1697 "lex_sql.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 343 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3531 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 82 "lex_sql.l"
// ignore whitespace
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 83 "lex_sql.l"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 85 "lex_sql.l"
yylval->number=atoi(yytext); RETURN_TOKEN(NUMBER);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 86 "lex_sql.l"
yylval->floats=(float)(atof(yytext)); RETURN_TOKEN(FLOAT);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 88 "lex_sql.l"
RETURN_TOKEN(SEMICOLON);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 89 "lex_sql.l"
RETURN_TOKEN(DOT);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 90 "lex_sql.l"
RETURN_TOKEN(EXIT);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 91 "lex_sql.l"
RETURN_TOKEN(HELP);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 92 "lex_sql.l"
RETURN_TOKEN(DESC);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 93 "lex_sql.l"
RETURN_TOKEN(CREATE);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "lex_sql.l"
RETURN_TOKEN(DROP);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 95 "lex_sql.l"
RETURN_TOKEN(TABLE);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 96 "lex_sql.l"
RETURN_TOKEN(TABLES);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 97 "lex_sql.l"
RETURN_TOKEN(INDEX);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 98 "lex_sql.l"
RETURN_TOKEN(ON);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 99 "lex_sql.l"
RETURN_TOKEN(SHOW);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 100 "lex_sql.l"
RETURN_TOKEN(SYNC);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 101 "lex_sql.l"
RETURN_TOKEN(SELECT);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 102 "lex_sql.l"
RETURN_TOKEN(CALC);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 103 "lex_sql.l"
RETURN_TOKEN(FROM);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 104 "lex_sql.l"
RETURN_TOKEN(WHERE);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 105 "lex_sql.l"
RETURN_TOKEN(AND);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 106 "lex_sql.l"
RETURN_TOKEN(INSERT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 107 "lex_sql.l"
RETURN_TOKEN(INTO);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 108 "lex_sql.l"
RETURN_TOKEN(VALUES);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 109 "lex_sql.l"
RETURN_TOKEN(DELETE);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 110 "lex_sql.l"
RETURN_TOKEN(UPDATE);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 111 "lex_sql.l"
RETURN_TOKEN(SET);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 112 "lex_sql.l"
RETURN_TOKEN(TRX_BEGIN);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 113 "lex_sql.l"
RETURN_TOKEN(TRX_COMMIT);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 114 "lex_sql.l"
RETURN_TOKEN(TRX_ROLLBACK);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 115 "lex_sql.l"
RETURN_TOKEN(INT_T);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 116 "lex_sql.l"
RETURN_TOKEN(STRING_T);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 117 "lex_sql.l"
RETURN_TOKEN(FLOAT_T);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 118 "lex_sql.l"
RETURN_TOKEN(DATE_T);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 119 "lex_sql.l"
RETURN_TOKEN(LOAD);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 120 "lex_sql.l"
RETURN_TOKEN(DATA);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 121 "lex_sql.l"
RETURN_TOKEN(INFILE);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 122 "lex_sql.l"
RETURN_TOKEN(EXPLAIN);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 123 "lex_sql.l"
{ yylval->string=strdup(yytext);RETURN_TOKEN(FMAX);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 124 "lex_sql.l"
{ yylval->string=strdup(yytext);RETURN_TOKEN(FMIN);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 125 "lex_sql.l"
{ yylval->string=strdup(yytext);RETURN_TOKEN(FAVG);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 126 "lex_sql.l"
{ yylval->string=strdup(yytext);RETURN_TOKEN(FCOUNT);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 127 "lex_sql.l"
RETURN_TOKEN(LIKE);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 128 "lex_sql.l"
RETURN_TOKEN(NULLABLE);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 129 "lex_sql.l"
RETURN_TOKEN(NULLPTR);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 130 "lex_sql.l"
RETURN_TOKEN(NOT);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 131 "lex_sql.l"
RETURN_TOKEN(ORDER);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 132 "lex_sql.l"
RETURN_TOKEN(BY);       
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 133 "lex_sql.l"
RETURN_TOKEN(ASC);  
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 135 "lex_sql.l"
RETURN_TOKEN(IN);  
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 136 "lex_sql.l"
RETURN_TOKEN(GROUP);  
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 139 "lex_sql.l"
yylval->string=strdup(yytext); RETURN_TOKEN(ID);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 140 "lex_sql.l"
RETURN_TOKEN(LBRACE);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 141 "lex_sql.l"
RETURN_TOKEN(RBRACE);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 143 "lex_sql.l"
RETURN_TOKEN(COMMA);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 144 "lex_sql.l"
RETURN_TOKEN(EQ);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 145 "lex_sql.l"
RETURN_TOKEN(LE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 146 "lex_sql.l"
RETURN_TOKEN(NE);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 147 "lex_sql.l"
RETURN_TOKEN(NE);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 148 "lex_sql.l"
RETURN_TOKEN(LT);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 149 "lex_sql.l"
RETURN_TOKEN(GE);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 150 "lex_sql.l"
RETURN_TOKEN(GT);
	YY_BREAK
case 64:
#line 153 "lex_sql.l"
case 65:
#line 154 "lex_sql.l"
case 66:
#line 155 "lex_sql.l"
case 67:
YY_RULE_SETUP
#line 155 "lex_sql.l"
{ return yytext[0]; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 157 "lex_sql.l"
{yylval->string=strdup(yytext); RETURN_TOKEN(DATE_STR);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 159 "lex_sql.l"
yylval->string=strdup(yytext); RETURN_TOKEN(DATE_STR);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 160 "lex_sql.l"
yylval->string=strdup(yytext); RETURN_TOKEN(DATE_STR);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 161 "lex_sql.l"
yylval->string=strdup(yytext); RETURN_TOKEN(DATE_STR);
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 163 "lex_sql.l"
yylval->string = strdup(yytext); RETURN_TOKEN(SSS);
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 164 "lex_sql.l"
yylval->string = strdup(yytext); RETURN_TOKEN(SSS);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 166 "lex_sql.l"
LOG_DEBUG("Unknown character [%c]",yytext[0]); return yytext[0];
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 171 "lex_sql.l"
ECHO;
	YY_BREAK
#line 2123 "lex_sql.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 2);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 343 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 2;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 343 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 342);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 171 "lex_sql.l"


void scan_string(const char *str, yyscan_t scanner) {
  yy_switch_to_buffer(yy_scan_string(str, scanner), scanner);
}

